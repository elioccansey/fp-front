AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Auth Application with DynamoDB, CloudFront, and S3

Resources:

  # S3 Bucket for Frontend
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "auth-frontend-${AWS::AccountId}-${AWS::Region}"  # Ensure this is lowercase
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # CloudFront OAI
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${FrontendS3Bucket}"

  # CloudFront Distribution
  FrontendCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendS3Bucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Enabled: true

  # DynamoDB Table for Users
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt UsersTable.Arn

        # Allow S3 access for CloudFront and Lambda
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "${FrontendS3Bucket.Arn}/*"  # For object-level actions
                  - !Sub "${FrontendS3Bucket.Arn}"     # For ListBucket action

  # Lambda Function for SignUp
  SignUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: signup.handler
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          import AWS from 'aws-sdk';
          import bcrypt from 'bcrypt';

          const dynamoDb = new AWS.DynamoDB.DocumentClient();
          const USERS_TABLE = process.env.USERS_TABLE;

          export const handler = async (event) => {
              const { email, password, name, profileImage } = JSON.parse(event.body);

              // Hash the password
              const hashedPassword = await bcrypt.hash(password, 10);

              const user = {
                  email,
                  password: hashedPassword,
                  name,
                  profileImage,
              };

              const params = {
                  TableName: USERS_TABLE,
                  Item: user,
              };

              try {
                  await dynamoDb.put(params).promise();
                  return {
                      statusCode: 201,
                      body: JSON.stringify({ message: 'User created successfully!' }),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: 'Could not create user' }),
                  };
              }
          };
      Environment:
        Variables:
          USERS_TABLE: "Users"
      Role: !GetAtt LambdaExecutionRole.Arn

  # Lambda Function for Login
  LoginFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: login.handler
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          import AWS from 'aws-sdk';
          import bcrypt from 'bcrypt';

          const dynamoDb = new AWS.DynamoDB.DocumentClient();
          const USERS_TABLE = process.env.USERS_TABLE;

          export const handler = async (event) => {
              const { email, password } = JSON.parse(event.body);

              const params = {
                  TableName: USERS_TABLE,
                  Key: { email },
              };

              try {
                  const result = await dynamoDb.get(params).promise();

                  if (!result.Item) {
                      return {
                          statusCode: 404,
                          body: JSON.stringify({ error: 'User not found' }),
                      };
                  }

                  const isPasswordValid = await bcrypt.compare(password, result.Item.password);

                  if (!isPasswordValid) {
                      return {
                          statusCode: 401,
                          body: JSON.stringify({ error: 'Invalid password' }),
                      };
                  }

                  return {
                      statusCode: 200,
                      body: JSON.stringify({ message: 'Login successful!' }),
                  };
              } catch (error) {
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: 'Could not log in' }),
                  };
              }
          };
      Environment:
        Variables:
          USERS_TABLE: "Users"
      Role: !GetAtt LambdaExecutionRole.Arn

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AuthAPI

  # SignUp Resource
  SignUpResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: signup
      RestApiId: !Ref ApiGateway

  # SignUp Method
  SignUpMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref SignUpResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SignUpFunction.Arn}/invocations"

  # Login Resource
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: login
      RestApiId: !Ref ApiGateway

  # Login Method
  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref LoginResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations"

  # S3 Bucket Policy to allow CloudFront OAI access
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub "${FrontendS3Bucket.Arn}/*"

Outputs:
  FrontendBucket:
    Description: S3 Bucket for frontend
    Value: !Ref FrontendS3Bucket

  ApiGatewayUrl:
    Description: URL for API Gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"
